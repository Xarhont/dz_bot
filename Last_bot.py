import telebot
from telebot import apihelper, types
from bd_config import *
from datetime import datetime
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

from random import *

apihelper.proxy = {'https': 'socks5://190737618:TsT9nZls@orbtl.s5.opennetwork.cc:999'} #—Ä–∞–±–æ—Ç–∞–ª –¥–æ 29 –º–∞—è
#apihelper.proxy = {'https': 'socks5://185.161.211.25:1080'}
my_bot = telebot.TeleBot('1245059539:AAGqbmMsH9bQu6-e3RjkYmCblt9vbKCvf2Y')
init_db()

##–¥–ª—è —É—á–∏—Ç–µ–ª—è
# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
teacher = 646951760
db_append_status = ''  # —Å—Ç–∞—Ç—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
new_example: Example  # –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
db_edit_status = ''  # —Å—Ç–∞—Ç—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
edit_example: Example  # –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
new_dz_1t = {'–∫–ª–∞—Å—Å': '',
             '—Ç–µ–º–∞': '',
             '–∫–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π': '',
             '–Ω–∞–∑–≤–∞–Ω–∏–µ': ''} # –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–≥–æ –¥–∑, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω–æ –≤ –±–¥
new_dz_status = ''  # —Å—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∑
# –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_page_markup = types.ReplyKeyboardMarkup(True)
main_page_markup.row('–ë–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π', '–†–∞–±–æ—Ç–∞ —Å –î–ó')
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î
main_bd_markup = types.ReplyKeyboardMarkup(True)
main_bd_markup.row('–î–æ–ø–æ–ª–Ω–∏—Ç—å –ë–î –û–ì–≠', '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ')
main_bd_markup.row('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å –î–ó
main_dz_markup = types.ReplyKeyboardMarkup(True)
main_dz_markup.row('–ó–∞–¥–∞—Ç—å –î–ó', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –î–ó', '–£–¥–∞–ª–∏—Ç—å –î–ó')
main_dz_markup.row('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
##–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
# –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_student_markup = types.ReplyKeyboardMarkup(True)
main_student_markup.row('–ù–∞ –≥–ª–∞–≤–Ω—É—é')


@my_bot.message_handler(commands=['start'])
def start_message(message):
    user_id = str(message.from_user.id)
    #–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—á–∏—Ç–µ–ª—è---------------------------------------------------
    if user_id == teacher:
        my_bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç, —Å–æ–∑–¥–∞—Ç–µ–ª—å!', reply_markup=main_page_markup)
        my_bot.send_message(user_id, '–ß–µ–º –∑–∞–π–º–µ–º—Å—è?')
    #–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è---------------------------------------------
    else:
        if UserTab.select().where(UserTab.teleg_id == user_id).count() == 0:
            UserTab.create(teleg_id=user_id,
                           name='',
                           klass='',
                           cur_selftest_1t='–Ω–µ—Ç',
                           reg_status='–ù–µ—Ç —Ñ–∏–æ',
                           reg_date=datetime.now(),
                           status='')
        if UserTab.get(teleg_id=user_id).reg_status == '–ù–µ—Ç —Ñ–∏–æ':
            my_bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Çüñê, –¥–∞–≤–∞–π —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ.')
            my_bot.send_message(user_id, '–í–≤–µ–¥–∏ —Å–≤–æ–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ü—ë—Ç—Ä)')
        if UserTab.get(teleg_id=user_id).reg_status == '–í—ã–ø–æ–ª–Ω–µ–Ω–∞':
            my_bot.send_message(user_id, f'–ü—Ä–∏–≤–µ—Çüñê, {UserTab.get(teleg_id=user_id).name}',
                                reply_markup=main_student_markup)
            user_function(message)


@my_bot.message_handler(content_types=['text'])
def main(message):
    user_id = message.chat.id
    # –¥–ª—è —É—á–∏—Ç–µ–ª—è--------------------------------------------------------------------
    global db_append_status
    global new_example
    global new_dz_status
    if user_id == teacher:
        if message.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é':
            my_bot.send_message(user_id, '–ß–µ–º –∑–∞–π–º–µ–º—Å—è?', reply_markup=main_page_markup)
            clearstatus()
        if message.text == '–ë–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π':
            my_bot.send_message(user_id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=main_bd_markup)
        if message.text == '–î–æ–ø–æ–ª–Ω–∏—Ç—å –ë–î –û–ì–≠':  # –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π (—à–∞–≥1)
            clearstatus()
            OGE_DB_APPEND1(user_id)
        if db_append_status == '–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞':  # –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            new_example.answer = message.text.upper()
            new_example_added_to_bd(new_example)
            my_bot.send_message(user_id, '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
            db_append_status = ''
            # –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ
            more_add_ex = types.InlineKeyboardMarkup()
            more_add_ex.row(types.InlineKeyboardButton(text='–î–∞',
                                                       callback_data=f'example add_{Theme.get(id=str(new_example.theme)).name}'))
            my_bot.send_message(user_id, '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –≤ —ç—Ç—É —Ç–µ–º—É?', reply_markup=more_add_ex)

        if db_edit_status == '–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞':  # –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –æ–≤—Ç–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –≤ –±–¥
            edit_example.answer = message.text
            TestExample.update({TestExample.answer: edit_example.answer}).where(
                TestExample.id == edit_example.id).execute()
            my_bot.send_message(user_id, '–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω')
            clearstatus()
        # elif message.text == '–ë–î':
        #     sel = TestExample.select()
        #     for ex in sel:
        #         my_bot.send_message(user_id, f'–¢–µ–º–∞ {Theme.get(id=ex.theme).name}/–Ω–æ–º–µ—Ä {ex.id}')
        #         my_bot.send_photo(user_id, ex.photo)
        #         my_bot.send_message(user_id, ex.answer)
        # elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è':
        #     test_themes = Theme.select()
        #     choice_theme_keyboard = types.InlineKeyboardMarkup()
        #     for theme in test_themes:
        #         choice_theme_keyboard.row(types.InlineKeyboardButton(text=theme.name,
        #                                                              callback_data=f'theme view_{theme.name}'))
        #     my_bot.send_message(user_id, '–ö–∞–∫—É—é —Ç–µ–º—É –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞?', reply_markup=choice_theme_keyboard)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ':  # –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
            clearstatus()
            OGE_DB_EDIT1(user_id)
        elif message.text == '–ó–∞–¥–∞—Ç—å –î–ó':
            clearstatus()
            create_dz(message)
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –î–ó':
            clearstatus()
            dz_delete1(message)
        elif message.text == '–†–∞–±–æ—Ç–∞ —Å –î–ó':
            my_bot.send_message(user_id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=main_dz_markup)

        elif new_dz_status == '–∫–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π':
            new_dz_status = '–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∑'
            new_dz_1t['–∫–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π'] = int(message.text)
            my_bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –î–ó')
        elif new_dz_status == '–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∑':
            #new_dz_status = '–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∑'
            new_dz_1t['–Ω–∞–∑–≤–∞–Ω–∏–µ'] = message.text
            create_dz_finish(message)
            #my_bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –î–ó')

        elif message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –î–ó':
            clearstatus()
            dz_check1(message)



   #–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞--------------------------------------------------------------------
    else:
        if UserTab.select().where(UserTab.teleg_id == user_id).count() == 0:
            my_bot.send_message(user_id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
        else:
            if UserTab.get(teleg_id=user_id).reg_status == '–ù–µ—Ç —Ñ–∏–æ':  # –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏ –¥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å
                reg_fio(message)
            elif UserTab.get(
                    teleg_id=user_id).reg_status == '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' and message.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é':  # –µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞—Ä–µ–≥–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –≤—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π
                UserTab.update({UserTab.status: ''}).where(UserTab.teleg_id == user_id).execute()
                user_function(message)
            elif UserTab.get(teleg_id=user_id).status.split('_')[0] == '–∫–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ 1 —Ç–µ—Å—Ç':
                create_selftest_1t(message)
            if UserTab.get(teleg_id=user_id).status == '—Ç–µ—Å—Ç 1—Ç —Å—Ç–∞—Ä—Ç':
                start_selftest_1t(message)
            elif UserTab.get(teleg_id=user_id).status == '—Ç–µ—Å—Ç 1—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ':
                do_selftest_1t(message)

##–¥–ª—è —É—á–∏—Ç–µ–ª—è------------------------------------------------------------------------
#—É–¥–∞–ª–µ–Ω–∏ –î–ó, –≤—ã–±–æ—Ä –¥–∑ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
def dz_delete1(message):
    user_id = message.chat.id
    dz_del_key = InlineKeyboardMarkup()
    for dz in DzTable.select()[::-1]:
        dz_del_key.row(types.InlineKeyboardButton(text=f'{dz.name} –¥–ª—è {dz.klass.name} –æ—Ç {dz.date_create.strftime("%H:%M - %d.%m")}',
                                                  callback_data=f'del dz_{dz.id}'))
    my_bot.send_message(user_id, '–ö–∞–∫–æ–µ –î–ó —É–¥–∞–ª–∏—Ç—å?', reply_markup=dz_del_key)


@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'del dz')
def dz_delete2(call):
    user_id = call.message.chat.id
    del_dz_keyboard = types.InlineKeyboardMarkup()
    del_dz_keyboard.row(types.InlineKeyboardButton(text='–î–∞',
                                                      callback_data=f"del dz1_{call.data.split('_')[1]}"))
    my_bot.send_message(user_id, '–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –î–ó?', reply_markup=del_dz_keyboard)

@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'del dz1')
def dz_delete3(call):
        DzTable.get(id=(call.data.split('_')[1])).delete_instance()
        my_bot.answer_callback_query(call.id, text="–î–ó —É–¥–∞–ª–µ–Ω–æ")





#–Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–ó, –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
def dz_check1(message):
    user_id = message.chat.id
    dz_klass_key = InlineKeyboardMarkup()
    #–≤—Å–µ –∫–ª–∞—Å—Å—ã –∏–∑ 7 –ø–∞—Ä–∞–ª–ª–µ–ª–∏
    p7 = []
    for kl in Parallel.get(name='7').classes:
        p7.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz check_{kl.name}"))
    dz_klass_key.row(*p7)
    # 8 –ø–∞—Ä–∞–ª–ª–µ–ª—å
    p8 = []
    for kl in Parallel.get(name='8').classes:
        p8.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz check_{kl.name}"))
    dz_klass_key.row(*p8)
    # 9 –ø–∞—Ä–∞–ª–ª–µ–ª—å
    p9 = []
    for kl in Parallel.get(name='9').classes:
        p9.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz check_{kl.name}"))
    dz_klass_key.row(*p9)
    # 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å
    p10 = []
    for kl in Parallel.get(name='10').classes:
        p10.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz check_{kl.name}"))
    dz_klass_key.row(*p10)
    # 11 –ø–∞—Ä–∞–ª–ª–µ–ª—å
    p11 = []
    for kl in Parallel.get(name='11').classes:
        p11.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz check_{kl.name}"))
    dz_klass_key.row(*p11)
    #–≤—ã–≤–æ–¥ –Ω–∞ –∫—Ä–∞–Ω –∫–ª–∞–≤—ã —Å –∫–ª–∞—Å—Å–∞–º–∏
    my_bot.send_message(user_id, '–ö–∞–∫–æ–π –∫–ª–∞—Å—Å –æ—Ç–∫—Ä—ã—Ç—å?', reply_markup=dz_klass_key)

#–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–ó, –≤—ã–±–æ—Ä –î–ó
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'dz check')
def dz_check2(call):
    user_id = call.message.chat.id
    #–≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–∑ –ø–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏
    dz_klass_check = types.InlineKeyboardMarkup()
    for dz in Klass.get(name=call.data.split('_')[1]).dz_po_klassu:
        dz_klass_check.row(types.InlineKeyboardButton(
            text=f'–æ—Ç {dz.date_create.strftime("%d.%m")} –ø–æ —Ç–µ–º–µ üìì {dz.theme.name} üëâ {dz.name}',
            callback_data=f"open dz_{dz.id}"))
    my_bot.send_message(user_id, '–ö–∞–∫–æ–µ –î–ó –æ—Ç–∫—Ä—ã—Ç—å?', reply_markup=dz_klass_check)

#–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–ó, –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —é–∑–µ—Ä–∞
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'open dz')
def dz_check3(call):
    user_id = call.message.chat.id
    dz_user_check = types.InlineKeyboardMarkup()
    for dz in DzTable.get(id=call.data.split('_')[1]).tests.select().order_by(SelfTest_1t.user):
        dz_user_check.row(types.InlineKeyboardButton(
        text= f'{str(dz.user.name).ljust(20,"=")} –≤–µ—Ä–Ω–æ {str(dz.right_count).rjust(2," ")} –∏–∑ {str(dz.ex_count).rjust(2," ")} \n {dz.date_start.strftime("%H:%M - %d.%m")}/{dz.date_finish.strftime("%H:%M - %d.%m")}',
            callback_data=f"open user dz_{dz.id}"))
    my_bot.send_message(user_id, '–ö–∞–∫–æ–π —Ç–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç—å??', reply_markup=dz_user_check)


@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'open user dz')
def dz_check3(call):
    user_id = call.message.chat.id
    my_bot.send_message(user_id, f'–¢–µ—Å—Ç —é–∑–µ—Ä–∞ üë®‚Äçüéì {SelfTest_1t.get(id=call.data.split("_")[1]).user.name}')
    for ex in SelfTest_1t.get(id=call.data.split('_')[1]).tests_ex:
        if ex.right == 'True':
            text = '–í–µ—Ä–Ω–æ ‚úÖ'
        else:
            text = '–ù–µ–≤–µ—Ä–Ω–æ ‚ùå'
        my_bot.send_photo(user_id, ex.test_ex_id.photo)
        my_bot.send_message(user_id, f"–û—Ç–≤–µ—Ç —é–∑–µ—Ä–∞: {ex.user_answer} {text}")

#–Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∑ –ø–æ 1 —Ç–µ–º–µ –Ω–∞ –∫–ª–∞—Å—Å
def create_dz(message):
    user_id = message.chat.id
    dz_klass_key = InlineKeyboardMarkup()
    # –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏–∑ 7 –ø–∞—Ä–∞–ª–ª–µ–ª–∏
    p7 = []
    for kl in Parallel.get(name='7').classes:
        p7.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz new_{kl}"))
    dz_klass_key.row(*p7)
    # 8 –ø–∞—Ä–∞–ª–ª–µ–ª—å
    p8 = []
    for kl in Parallel.get(name='8').classes:
        p8.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz new_{kl}"))
    dz_klass_key.row(*p8)
    # 9 –ø–∞—Ä–∞–ª–ª–µ–ª—å
    p9 = []
    for kl in Parallel.get(name='9').classes:
        p9.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz new_{kl}"))
    dz_klass_key.row(*p9)
    # 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å
    p10 = []
    for kl in Parallel.get(name='10').classes:
        p10.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz new_{kl}"))
    dz_klass_key.row(*p10)
    # 11 –ø–∞—Ä–∞–ª–ª–µ–ª—å
    p11 = []
    for kl in Parallel.get(name='11').classes:
        p11.append(InlineKeyboardButton(text=kl.name, callback_data=f"dz new_{kl}"))
    dz_klass_key.row(*p11)
    # –≤—ã–≤–æ–¥ –Ω–∞ –∫—Ä–∞–Ω –∫–ª–∞–≤—ã —Å –∫–ª–∞—Å—Å–∞–º–∏
    my_bot.send_message(user_id, '–ö–∞–∫–æ–π –∫–ª–∞—Å—Å –æ—Ç–∫—Ä—ã—Ç—å?', reply_markup=dz_klass_key)




#–≤—ã–±–æ—Ä —Ç–µ–º—ã –¥–∑
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'dz new')
def create_dz_2(call):
    user_id = call.message.chat.id
    global new_dz_1t
    new_dz_1t['–∫–ª–∞—Å—Å'] = call.data.split('_')[1]
    dz_theme_key = types.InlineKeyboardMarkup()
    for theme in Theme.select():
        dz_theme_key.row(types.InlineKeyboardButton(text=theme.name,
                                                             callback_data=f'choise new dz theme_{theme}'))
    my_bot.send_message(user_id, '–ü–æ –∫–∞–∫–æ–π —Ç–µ–º–µ –î–ó?', reply_markup=dz_theme_key)

#–≤—ã–±–æ—Ä –∫–æ–ª-–≤–∞ –∑–∞–∑–∞–Ω–∏–π –≤ –¥–∑
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'choise new dz theme')
def create_dz_3(call):
    user_id = call.message.chat.id
    global new_dz_1t
    global new_dz_status
    new_dz_1t['—Ç–µ–º–∞'] = call.data.split('_')[1]
    new_dz_status = '–∫–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π'
    my_bot.send_message(user_id, f"–ó–∞–¥–∞–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ - {TestExample.select().where(TestExample.theme == new_dz_1t['—Ç–µ–º–∞']).count()}")
    my_bot.send_message(user_id, '–ö–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π –≤ –î–ó?')

def create_dz_finish(message):
    user_id = message.chat.id
    DzTable.create(klass=new_dz_1t['–∫–ª–∞—Å—Å'], theme=new_dz_1t['—Ç–µ–º–∞'], count=new_dz_1t['–∫–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π'],
                   name=new_dz_1t['–Ω–∞–∑–≤–∞–Ω–∏–µ'], date_create=datetime.now())
    clearstatus()
    my_bot.send_message(user_id, '–î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ')


@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'example add')
def OGE_DB_APPEND3(call):
    global db_append_status
    global new_example
    user_id = call.message.chat.id
    db_append_status = '–æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ'
    new_example = Example(theme=Theme.get(name=call.data.split('_')[1]), photo='', answer='')
    my_bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è')


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π, –≤—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è (—à–∞–≥3)
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'theme edit')
def OGE_DB_EDIT2(call):
    global db_edit_status
    global edit_example
    user_id = call.message.chat.id
    db_edit_status = '–≤—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è'
    edit_example = Example(theme=Theme.get(name=call.data.split('_')[1]), photo='', answer='')
    allTestsOfTheme = TestExample.select().where(TestExample.theme == Theme.get(id=edit_example.theme))
    for ex in allTestsOfTheme:
        my_bot.send_message(user_id, f'–ó–∞–¥–∞–Ω–∏–µ ‚Ññ {ex.id}   –û—Ç–≤–µ—Ç: {ex.answer}')
        my_bot.send_photo(user_id, ex.photo)
        edit_test_keyboard = types.InlineKeyboardMarkup()
        edit_test_keyboard.row(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                                          callback_data=f'edit test_{ex.id}'),
                               types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',
                                                          callback_data=f'delete test_{ex.id}')
                               )
        my_bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=edit_test_keyboard)


# —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'delete test')
def OGE_DB_DEL1(call):
    user_id = call.message.chat.id
    del_test_keyboard = types.InlineKeyboardMarkup()
    del_test_keyboard.row(types.InlineKeyboardButton(text='–î–∞',
                                                      callback_data=f"delete test1_{call.data.split('_')[1]}"))
    my_bot.send_message(user_id, '–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?', reply_markup=del_test_keyboard)

@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'delete test1')
def OGE_DB_DEL2(call):
        # user_id = call.message.chat.id
        TestExample.get(id=(call.data.split('_')[1])).delete_instance()
        my_bot.answer_callback_query(call.id, text="–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–≤—Ç–µ—Ç–∞ (—à–∞–≥4)
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'edit test')
def OGE_DB_EDIT3(call):
    global edit_example
    user_id = call.message.chat.id
    edit_example.id = int(call.data.split('_')[1])
    my_bot.send_message(user_id,
                        f'–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ ‚Ññ {edit_example.id} üëàüèª –û—Ç–≤–µ—Ç: {TestExample.get(id=edit_example.id).answer}')
    my_bot.send_photo(user_id, TestExample.get(id=edit_example.id).photo)
    edit_example_keyboard = types.InlineKeyboardMarkup()
    edit_example_keyboard.row(types.InlineKeyboardButton(text=' üì∑ –§–æ—Ç–æ ', callback_data='edit photo'))
    edit_example_keyboard.row(types.InlineKeyboardButton(text='üìï –û—Ç–≤–µ—Ç', callback_data='edit answer'))
    my_bot.send_message(user_id, '–ß—Ç–æ –∏–∑–º–µ–Ω—è–µ–º –≤ –∑–∞–¥–∞–Ω–∏–∏?', reply_markup=edit_example_keyboard)


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–∞–¥–∞–Ω–∏–∏
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'edit photo')
def OGE_DB_EDIT41(call):
    global edit_example
    global db_edit_status
    user_id = call.message.chat.id
    db_edit_status = '–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ'
    my_bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è')


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–∞–¥–∞–Ω–∏–∏
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'edit answer')
def OGE_DB_EDIT42(call):
    global edit_example
    global db_edit_status
    user_id = call.message.chat.id
    db_edit_status = '–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'
    my_bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ')


@my_bot.message_handler(content_types=['photo'])
def main(message):
    user_id = message.chat.id
    if user_id == teacher:
        global db_append_status
        global db_edit_status
        global new_example
        global edit_example
        user_id = message.chat.id
        if db_append_status == '–æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ':  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, —à–∞–≥4, –ø–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ç–æ, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
            new_example.photo = message.photo[0].file_id
            my_bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ')
            db_append_status = '–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞'
        elif db_edit_status == '–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ':  # –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –≤ –±–¥
            edit_example.photo = message.photo[0].file_id
            TestExample.update({TestExample.photo: edit_example.photo}).where(
                TestExample.id == edit_example.id).execute()
            my_bot.send_message(user_id, '–§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ')
            clearstatus()


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, –≤—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—à–∞–≥2)
def OGE_DB_APPEND1(user_id):
    test_themes = Theme.select()
    choice_theme_keyboard = types.InlineKeyboardMarkup()
    for theme in test_themes:
        choice_theme_keyboard.row(types.InlineKeyboardButton(text=theme.name,
                                                             callback_data=f'example add_{theme.name}'))
    my_bot.send_message(user_id, '–ö–∞–∫—É—é —Ç–µ–º—É –¥–æ–ø–æ–ª–Ω–∏–º?', reply_markup=choice_theme_keyboard)


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π, –≤—ã–±–æ—Ä —Ç–µ–º—ã (—à–∞–≥2)
def OGE_DB_EDIT1(user_id):
    test_themes = Theme.select()
    choice_theme_keyboard = types.InlineKeyboardMarkup()
    for theme in test_themes:
        choice_theme_keyboard.row(types.InlineKeyboardButton(text=theme.name,
                                                             callback_data=f'theme edit_{theme.name}'))
    my_bot.send_message(user_id, '–ö–∞–∫—É—é —Ç–µ–º—É –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è?', reply_markup=choice_theme_keyboard)


def clearstatus():
    global db_edit_status
    global db_append_status
    global new_dz_1t
    global new_dz_status
    db_edit_status = ''
    db_append_status = ''
    new_dz_1t = {'–ø–∞—Ä–∞–ª–ª–µ–ª—å': '',
                 '—Ç–µ–º–∞': '',
                 '–∫–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π': '',
                 '–Ω–∞–∑–≤–∞–Ω–∏–µ': ''}
    new_dz_status = ''


##–¥–ª—è —É—á–µ–Ω–∏–∫–∞-------------------------------------------------------------------------
# –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ñ–∏–æ
def reg_fio(message):
    user_id = message.chat.id
    UserTab.update({UserTab.name: message.text}).where(UserTab.teleg_id == user_id).execute()
    UserTab.update({UserTab.reg_status: '–ù–µ—Ç –∫–ª–∞—Å—Å–∞'}).where(UserTab.teleg_id == user_id).execute()
    choice_klass = types.InlineKeyboardMarkup()
    for klass in Klass.select():
        choice_klass.row(types.InlineKeyboardButton(text=klass.name,
                                                    callback_data=f'choice klass_{klass.name}'))
    my_bot.send_message(user_id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å', reply_markup=choice_klass)


# –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
@my_bot.callback_query_handler(func=lambda call: call.data.split('_')[0] == 'choice klass')
def reg_klass(call):
    user_id = call.message.chat.id
    klass = Klass.get(name=call.data.split('_')[1])
    UserTab.update({UserTab.klass: klass}).where(UserTab.teleg_id == user_id).execute()
    UserTab.update({UserTab.reg_status: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'}).where(UserTab.teleg_id == user_id).execute()
    my_bot.send_message(user_id, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üëçüèª', reply_markup=main_student_markup)


# –≤—ã–±–æ—Ä —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
def user_function(message):
    user_id = message.chat.id
    choice_func = types.InlineKeyboardMarkup()
    choice_func.row(types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ –æ–¥–Ω–æ–π —Ç–µ–º–µ',
                                               callback_data='start_selftest_1t'))
    choice_func.row(types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å –î–ó',
                                               callback_data='check_dz'))
    my_bot.send_message(user_id, '–ß–µ–º –∑–∞–π–º–µ–º—Å—è?', reply_markup=choice_func)


# #—Å—Ç–∞—Ä—Ç –î–ó - –≤—ã–±–æ—Ä –î–ó –∏–∑ —Å–ø–∏—Å–∫–∞
# @my_bot.callback_query_handler(func=lambda call: call.data == 'check_dz')
# def choice_theme_selftest_1t(call):
#     user_id = call.message.chat.id
#     choice_dz = types.InlineKeyboardMarkup()
#     for dz in UserTab.get(teleg_id=user_id).klass.paral.dz_po_parallel.select():
#         if DzTable.get(id=dz.id).tests.select().where(
#                 SelfTest_1t.user == UserTab.get(teleg_id=user_id)).count() == 0:
#             status_dz = '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå'
#         else:
#             status_dz = '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ'
#         choice_dz.row(types.InlineKeyboardButton(text=f'{dz.name} - {status_dz}',
#                                                    callback_data=f'choice {dz.id}'))
#     my_bot.send_message(user_id, '–ö–∞–∫–æ–µ –î–ó –æ—Ç–∫—Ä—ã—Ç—å? ‚ùì', reply_markup=choice_dz)

    #------------------

#–¥—É–±–ª—å –¥–≤–∞
@my_bot.callback_query_handler(func=lambda call: call.data == 'check_dz')
def choice_theme_selftest_1t(call):
    user_id = call.message.chat.id
    choice_dz = types.InlineKeyboardMarkup()
    if len(UserTab.get(teleg_id=user_id).klass.dz_po_klassu.select()) > 4:
        r=5
    else:
        r=len(UserTab.get(teleg_id=user_id).klass.dz_po_klassu.select())+1
    for i in range(1,r):
        z1 = UserTab.get(teleg_id=user_id).klass.dz_po_klassu.select()[-i]
        if DzTable.get(id=z1.id).tests.select().where(
                                SelfTest_1t.user == UserTab.get(teleg_id=user_id)).count() == 0:
                            status_dz = '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå'
        else:
            status_dz = '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ'
        choice_dz.row(types.InlineKeyboardButton(text=f'{z1.name} - {status_dz}', callback_data=f'choice {z1.id}'))
    my_bot.send_message(user_id, '–ö–∞–∫–æ–µ –î–ó –æ—Ç–∫—Ä—ã—Ç—å? ‚ùì', reply_markup=choice_dz)


#—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–∑ –ø–æ —à–∞–±–ª–æ–Ω—É –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
@my_bot.callback_query_handler(func=lambda call: call.data.split(' ')[0] == 'choice')
def create_dz_1t(call):
    dz = DzTable.get(id=call.data.split(' ')[1])
    user_id = call.message.chat.id
    tid_dz = SelfTest_1t.create(user=UserTab.get(teleg_id=user_id),
                             theme=dz.theme,
                             ex_count=dz.count,
                             done_ex_count=0,
                             right_count=0,
                             date_start=datetime.now(),
                             date_finish='',
                             ex_data=gen_numex_dz_1t(dz),
                             dz_id=dz.id).id
    UserTab.update({UserTab.cur_selftest_1t: tid_dz}).where(UserTab.teleg_id == user_id).execute()
    UserTab.update({UserTab.status: '—Ç–µ—Å—Ç 1—Ç —Å—Ç–∞—Ä—Ç'}).where(UserTab.teleg_id == user_id).execute()
    start_selftest_1t(call.message)




# –≤—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–æ 1 —Ç–µ–º–µ
@my_bot.callback_query_handler(func=lambda call: call.data == 'start_selftest_1t')
def choice_theme_selftest_1t(call):
    user_id = call.message.chat.id
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if UserTab.get(teleg_id=user_id).cur_selftest_1t == '–Ω–µ—Ç':
        print('–Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –Ω–µ—Ç')
        choice_theme_selftest_1t = types.InlineKeyboardMarkup()
        for theme in Theme.select():
            choice_theme_selftest_1t.row(types.InlineKeyboardButton(text=theme.name,
                                                                    callback_data=f'start_selftest_1t {theme}'))
        my_bot.send_message(user_id, 'üßæ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:', reply_markup=choice_theme_selftest_1t)
    # else –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    else:
        print('–Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –µ—Å—Ç—å')
        continue_or_start_selftest_1t = types.InlineKeyboardMarkup()
        continue_or_start_selftest_1t.row(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç',
                                                                     callback_data=f'continue_selftest_1t {UserTab.get(teleg_id=user_id).cur_selftest_1t} '))
        continue_or_start_selftest_1t.row(types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π',
                                                                     callback_data='del_cur_selftest_1t'))

        date = SelfTest_1t.get(id=UserTab.get(teleg_id=user_id).cur_selftest_1t).date_start
        theme = SelfTest_1t.get(id=UserTab.get(teleg_id=user_id).cur_selftest_1t).theme.name
        my_bot.send_message(user_id, f'–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç {date.day}.{date.month} –ø–æ —Ç–µ–º–µ {theme}',
                            reply_markup=continue_or_start_selftest_1t)


# –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
@my_bot.callback_query_handler(func=lambda call: call.data.split(' ')[0] == 'continue_selftest_1t')
def continue_theme_selftest_1t(call):
    user_id = call.message.chat.id
    print('-- –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç')
    my_bot.send_message(user_id, '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç')
    start_selftest_1t(call.message)


# –æ–±–Ω—É–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏ –≤—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ
@my_bot.callback_query_handler(func=lambda call: call.data == 'del_cur_selftest_1t')
def choice_theme_selftest_1t(call):
    user_id = call.message.chat.id
    UserTab.update({UserTab.cur_selftest_1t: '–Ω–µ—Ç'}).where(UserTab.teleg_id == user_id).execute()
    choice_theme_selftest_1t = types.InlineKeyboardMarkup()
    for theme in Theme.select():
        choice_theme_selftest_1t.row(types.InlineKeyboardButton(text=theme.name,
                                                                callback_data=f'start_selftest_1t {theme}'))
    my_bot.send_message(user_id, 'üßæ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:', reply_markup=choice_theme_selftest_1t)


# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π
@my_bot.callback_query_handler(func=lambda call: call.data.split(' ')[0] == 'start_selftest_1t')
def choice_theme_selftest_1t(call):
    user_id = call.message.chat.id
    theme = call.data.split(' ')[1]
    UserTab.update({UserTab.status: f'–∫–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ 1 —Ç–µ—Å—Ç_{theme}'}).where(UserTab.teleg_id == user_id).execute()
    my_bot.send_message(user_id,
                        f'–ó–∞–¥–∞–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ üëâüèª {TestExample.select().where(TestExample.theme == theme).count()}')
    my_bot.send_message(user_id, '–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ —Ç–µ—Å—Ç?ü§ì')


# –∑–∞–ø–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ—Å—Ç–∞ –≤ –±–¥
def create_selftest_1t(message):
    user_id = message.chat.id
    tid = SelfTest_1t.create(user=UserTab.get(teleg_id=user_id),
                             theme=UserTab.get(teleg_id=user_id).status.split('_')[1],
                             ex_count=int(message.text),
                             done_ex_count=0,
                             right_count=0,
                             date_start=datetime.now(),
                             date_finish='',
                             ex_data=gen_numex_1t(message)).id
    UserTab.update({UserTab.cur_selftest_1t: tid}).where(UserTab.teleg_id == user_id).execute()
    UserTab.update({UserTab.status: '—Ç–µ—Å—Ç 1—Ç —Å—Ç–∞—Ä—Ç'}).where(UserTab.teleg_id == user_id).execute()


def start_selftest_1t(message):
    ex_id = []
    user_id = message.chat.id
    ex_id = UserTab.get(teleg_id=user_id).tests[-1].ex_data[1:-1].split(', ')
    my_bot.send_message(user_id, f'–ó–∞–¥–∞–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å {len(ex_id)}')
    my_bot.send_photo(user_id, TestExample.get(id=ex_id[0]).photo)

    propusk_theme_selftest_1t = types.InlineKeyboardMarkup()
    propusk_theme_selftest_1t.row(types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ',
                                                             callback_data='propusk_selftest_1t'))

    my_bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç', reply_markup=propusk_theme_selftest_1t)
    UserTab.update({UserTab.status: '—Ç–µ—Å—Ç 1—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'}).where(UserTab.teleg_id == user_id).execute()
    print('–ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞')


def do_selftest_1t(message):
    ex_id = []
    user_id = message.chat.id
    ex_id = UserTab.get(teleg_id=user_id).tests[-1].ex_data[1:-1].split(', ')
    print('—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π - ', UserTab.get(teleg_id=user_id).tests[-1].ex_data[1:-1].split(', '))
    # –ø–æ–∫–∞ –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–∞ –∑–∞–¥–∞–Ω–∏–π –≤ —Ç–µ—Å—Ç–µ
    if UserTab.get(teleg_id=user_id).tests[-1].done_ex_count < UserTab.get(teleg_id=user_id).tests[-1].ex_count:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        print('–æ—Ç–≤–µ—Ç —é–∑–µ—Ä–∞ ', message.text)
        print('–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç ', TestExample.get(id=ex_id[0]).answer)
        if TestExample.get(id=ex_id[0]).answer == message.text.upper():
            ranswer = 'True'
            print('–æ—Ç–≤–µ—Ç –≤–µ—Ä–µ–Ω-1')
            SelfTest_1t.update({SelfTest_1t.right_count: SelfTest_1t.right_count + 1}).where(
                SelfTest_1t.id == UserTab.get(teleg_id=user_id).cur_selftest_1t).execute()
        else:
            ranswer = 'False'
            print('–æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω')
        SelfTest_1t.update({SelfTest_1t.done_ex_count: SelfTest_1t.done_ex_count + 1}).where(
            SelfTest_1t.id == UserTab.get(teleg_id=user_id).cur_selftest_1t).execute()
        # —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞–Ω–∏–∏ –≤ –ë–î
        test_id = UserTab.get(teleg_id=user_id).cur_selftest_1t
        SelfTest_1t_ex.create(test_id=SelfTest_1t.get(id=test_id),
                              test_ex_id=TestExample.get(id=ex_id[0]),
                              user_answer=message.text,
                              right=ranswer,
                              date=datetime.now())
        print('–∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞–Ω–∏—è')
        # —Å–¥–≤–∏–≥ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
        ex_id = selftest_1t_sdvig_del(user_id)
        # –≤—ã–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        print('—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π new - ', UserTab.get(teleg_id=user_id).tests[-1].ex_data[1:-1].split(', '))
        if UserTab.get(teleg_id=user_id).tests[-1].done_ex_count < UserTab.get(teleg_id=user_id).tests[-1].ex_count:
            my_bot.send_message(user_id, f'–ó–∞–¥–∞–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å {len(ex_id)}')
            my_bot.send_photo(user_id, TestExample.get(id=ex_id[0]).photo)
            print('–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ ', TestExample.get(id=ex_id[0]).answer)
            propusk_theme_selftest_1t = types.InlineKeyboardMarkup()
            propusk_theme_selftest_1t.row(types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ',
                                                                     callback_data='propusk_selftest_1t'))

            my_bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç', reply_markup=propusk_theme_selftest_1t)
        else:
            my_bot.send_message(user_id, '–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω')
            SelfTest_1t.update(date_finish=datetime.now()).where(
                SelfTest_1t.id == UserTab.get(teleg_id=user_id).cur_selftest_1t).execute()
            my_bot.send_message(user_id,
                                f'–†–µ–∑—É–ª—å—Ç–∞—Ç {SelfTest_1t.get(id=UserTab.get(teleg_id=user_id).cur_selftest_1t).right_count} –∏–∑ {SelfTest_1t.get(id=UserTab.get(teleg_id=user_id).cur_selftest_1t).ex_count}')
            UserTab.update(cur_selftest_1t='–Ω–µ—Ç').where(UserTab.teleg_id == user_id).execute()
    else:
        my_bot.send_message(user_id, '–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω')
        SelfTest_1t.update(date_finish=datetime.now()).where(
            SelfTest_1t.id == UserTab.get(teleg_id=user_id).cur_selftest_1t).execute()
        my_bot.send_message(user_id,
                            f'–†–µ–∑—É–ª—å—Ç–∞—Ç {SelfTest_1t.get(id=UserTab.get(teleg_id=user_id).cur_selftest_1t).right_count} –∏–∑ {SelfTest_1t.get(id=UserTab.get(teleg_id=user_id).cur_selftest_1t).ex_count}')
        UserTab.update(cur_selftest_1t='–Ω–µ—Ç').where(UserTab.teleg_id == user_id).execute()


# —Å–¥–≤–∏–≥ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
def selftest_1t_sdvig_del(user_id):
    ex_id = UserTab.get(teleg_id=user_id).tests[-1].ex_data[1:-1].split(', ')
    ex_id.pop(0)
    print('>>>', ex_id)
    for i in range(0, len(ex_id)):
        ex_id[i] = int(ex_id[i])
    print('>>>', ex_id)
    SelfTest_1t.update({SelfTest_1t.ex_data: ex_id}).where(
        SelfTest_1t.id == UserTab.get(teleg_id=user_id).cur_selftest_1t).execute()
    return ex_id


# —Å–¥–≤–∏–≥ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
def selftest_1t_sdvig(user_id):
    ex_id = UserTab.get(teleg_id=user_id).tests[-1].ex_data[1:-1].split(', ')
    print('>>1>', ex_id)
    first = ex_id[0]
    for i in range(0, len(ex_id) - 1):
        ex_id[i] = ex_id[i + 1]
    ex_id[len(ex_id) - 1] = first
    for i in range(0, len(ex_id)):
        ex_id[i] = int(ex_id[i])
    print('>>2>', ex_id)
    SelfTest_1t.update({SelfTest_1t.ex_data: ex_id}).where(
        SelfTest_1t.id == UserTab.get(teleg_id=user_id).cur_selftest_1t).execute()
    return ex_id


@my_bot.callback_query_handler(func=lambda call: call.data == 'propusk_selftest_1t')
def call_propusk_selftest_1t(call):
    user_id = call.message.chat.id
    UserTab.update({UserTab.status: '—Ç–µ—Å—Ç 1—Ç —Å—Ç–∞—Ä—Ç'}).where(UserTab.teleg_id == user_id).execute()
    selftest_1t_sdvig(user_id)
    start_selftest_1t(call.message)


if __name__ == "__main__":
    my_bot.polling(none_stop=False)
